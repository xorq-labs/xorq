name: ci-test-gcs

on:
  workflow_dispatch:
  pull_request_target:
    types:
      - labeled

permissions:
  contents: read


jobs:
  linux:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.label.name == 'ci-test-gcs'
    strategy:
      matrix:
        target: ["x86_64"]
        python-version: ["3.11"]
    steps:
      - name: checkout
        uses: actions/checkout@v4
        if: github.event.label.name != 'ci-test-gcs'

      - name: checkout
        if: github.event.label.name == 'ci-test-gcs'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: extractions/setup-just@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: download test data
        run: just download-data

      - name: Rust latest
        run: rustup update

      - name: cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./target/
          key: cargo-cache-${{ matrix.python-version }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install the project
        run: uv sync --extra examples --group dev --group test --no-install-project
        working-directory: ${{ github.workspace }}

      - name: maturin develop
        uses: PyO3/maturin-action@v1
        with:
          command: 'develop'
          args: '--release --strip'
          target: ${{ matrix.target }}
          sccache: 'true'
          manylinux: 'auto'

      - name: start services
        run: docker compose up --build --wait

      - name: pytest
        run: uv run --no-sync pytest --import-mode=importlib python/xorq/tests/test_register.py::test_deferred_read_parquet_from_gcs -v --cov --cov-report=xml
        working-directory: ${{ github.workspace }}
        env:
          GCS_ENABLED: True

      - name: Upload coverage reports to Codecov
        if: success()
        continue-on-error: true
        uses: codecov/codecov-action@v5.4.2
        with:
          flags: gcs
          token: ${{ secrets.CODECOV_TOKEN }}

