# otel-collector-config.yaml
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:${env:OTEL_COLLECTOR_PORT_GRPC}"
      http:
        endpoint: "0.0.0.0:${env:OTEL_COLLECTOR_PORT_HTTP}"
  prometheus:
    config:
      global:
        scrape_interval: 2s
      scrape_configs:
        - job_name: "xorq-flight"
          static_configs:
            - targets: ["${env:PROMETHEUS_SCRAPE_URL}"]
exporters:
  debug:
    verbosity: detailed
  file:
    path: "${env:OTEL_COLLECTOR_CONTAINER_LOG_DIR}/${env:OTEL_LOG_FILE_NAME}"
  otlphttp/grafana_cloud:
    endpoint: "${env:GRAFANA_CLOUD_OTLP_ENDPOINT}"
    auth:
      authenticator: basicauth/otlp_auth
  prometheusremotewrite:
    endpoint: "${env:PROMETHEUS_GRAFANA_ENDPOINT}"
    auth:
      authenticator: basicauth/prometheus_auth
extensions:
  basicauth/otlp_auth:
    client_auth:
      username: "${env:GRAFANA_CLOUD_INSTANCE_ID}"
      password: "${env:GRAFANA_CLOUD_API_KEY}"
  basicauth/prometheus_auth:
    client_auth:
      username: "${env:PROMETHEUS_GRAFANA_USERNAME}"
      password: "${env:GRAFANA_CLOUD_API_KEY}"
processors:
  batch:
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug, file, otlphttp/grafana_cloud]
    metrics:
      receivers: [otlp, prometheus]
      processors: [batch]
      exporters: [prometheusremotewrite, debug]
    logs:
      receivers: [otlp]
      exporters: [debug, file]
      processors: [batch]
  extensions: [basicauth/otlp_auth, basicauth/prometheus_auth]
